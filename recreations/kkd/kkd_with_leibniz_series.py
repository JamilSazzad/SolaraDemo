# Some abbreviations:
# LPS: Leibniz Partial Sum
# MLPS: Modified Leibniz Partial Sum

import math

N_MAX = [10000] + [k * (10 ** p) for p in range(4, 9) for k in range(2, 11)]

PRIMES = [2]
LPS_CPS = {}
MLPS_CPS = {}

def is_prime(k):
    bound = int(math.sqrt(k)) + 1
    for p in PRIMES:
        if p > bound:
            break
        if k % p == 0:
            return False
    return True

def update_prime_list(n):
    p_max = PRIMES[-1]
    if n > p_max:
        for k in range(p_max + 1, n + 1):
            if is_prime(k):
                PRIMES.append(k)

def get_prime_powers(n):
    update_prime_list(n)
    prime_powers = dict()
    for p in PRIMES:
        max_power = int(math.log(n, p)) + 1
        for k in range(1, max_power + 1):
            pk = p ** k
            if pk > n:
                break
            else:
                prime_powers[pk] = k
    return prime_powers

def chi(k):
    return (k % 4 == 1) - (k % 4 == 3)

def get_lps(n):
    possible_starting_list = list(filter(lambda x: x <= n, LPS_CPS.keys()))
    if len(possible_starting_list) == 0:
        lps = 0.
        lower_bound = 1
    else:
        starting_point = max(possible_starting_list)
        lps = LPS_CPS[starting_point]
        lower_bound = starting_point + 1
    lps += sum(map(lambda m: float(chi(m))/m, (k for k in range(lower_bound, n + 1))))
    LPS_CPS[n] = lps
    return lps

def get_mlps(n):
    possible_starting_list = list(filter(lambda x: x <= n, MLPS_CPS.keys()))
    if len(possible_starting_list) == 0:
        mlps = 0.
        lower_bound = 1
    else:
        starting_point = max(possible_starting_list)
        mlps = MLPS_CPS[starting_point]
        lower_bound = starting_point + 1
    prime_powers = get_prime_powers(n)
    for term in filter(lambda x: x >= lower_bound, prime_powers.keys()):
        power = prime_powers[term]
        mlps += 1./power * float(chi(term)) / term
    MLPS_CPS[n] = mlps
    return mlps

if __name__ == '__main__':
    for n in N_MAX:
        lps = get_lps(n)
        ln_lps = math.log(lps)
        mlps = get_mlps(n)
        diff = mlps - ln_lps
        with open("output_cps.txt", "a+") as f:
            print(n, lps, ln_lps, mlps, diff, file = f)


###########
# Results #
###########
# n           LPS                  ln(LPS)                MLPS                    Difference = MLPS - ln(LPS)
# 10000       0.7853481633979478   -0.2416281392736009    -0.24117311227309343     0.0004550270005074797
# 20000       0.7853731633975086   -0.2415963067656487    -0.24127795029323082     0.00031835647241787446
# 30000       0.7853814967307979   -0.24158569615470998   -0.24157865886807672     7.037286633260198e-06
# 40000       0.7853856633974539   -0.2415803908914454    -0.24174897952201085    -0.00016858863056545825
# 50000       0.7853881633974501   -0.24157720774699315   -0.2417656747901255     -0.00018846704313235652
# 60000       0.7853898300641151   -0.2415750856563197    -0.24145019425822228     0.00012489139809740424
# 70000       0.7853910205403047   -0.24157356988002388   -0.24165753446612065    -8.396458609677415e-05
# 80000       0.7853919133974471   -0.24157243304930964   -0.24154887179762055     2.356125168909151e-05
# 90000       0.7853926078418912   -0.24157154884853638   -0.24137177069737695     0.00019977815115942987
# 100000      0.7853931633974466   -0.24157084148848065   -0.24145844940188363     0.00011239208659702404
# 200000      0.7853956633974462   -0.2415676583744211    -0.24148839532681188     7.926304760921821e-05
# 300000      0.7853964967307795   -0.24156659733865266   -0.24150331314449705     6.328419415560504e-05
# 400000      0.7853969133974461   -0.2415660668211907    -0.2415659236474881      1.4317370258809525e-07
# 500000      0.7853971633974461   -0.2415657485108485    -0.2415906260218828     -2.487751103430469e-05
# 600000      0.7853973300641128   -0.24156553630401      -0.24153978028566597     2.5756018344036402e-05
# 700000      0.7853974491117319   -0.24156538472772435   -0.24151793983042033     4.7444897304016465e-05
# 800000      0.7853975383974462   -0.24156527104552522   -0.24161137756297726    -4.610651745204364e-05
# 900000      0.7853976078418906   -0.24156518262604598   -0.24158749971053953    -2.231708449354497e-05
# 1000000     0.7853976633974462   -0.24156511189046811   -0.24162638755419963    -6.127566373151372e-05
# 2000000     0.7853979133974462   -0.24156479358042993   -0.24155524803609618     9.545544333744438e-06
# 3000000     0.7853979967307796   -0.24156468747710635   -0.2416022754667672     -3.7587989660858856e-05
# 4000000     0.7853980383974463   -0.24156463442544882   -0.2415631936459466      1.4407795022042258e-06
# 5000000     0.7853980633974462   -0.24156460259445567   -0.24155468826470386     9.914329751808948e-06
# 6000000     0.7853980800641129   -0.24156458137379408   -0.24156362918018004     9.521936140399756e-07
# 7000000     0.7853980919688749   -0.2415645662161789    -0.24155406620213046     1.050001404842571e-05
# 8000000     0.7853981008974463   -0.24156455484796768   -0.24156998220571468    -5.427357747000983e-06
# 9000000     0.7853981078418908   -0.2415645460060257    -0.2415725223393767     -7.976333351006337e-06
# 10000000    0.7853981133974464   -0.24156453893247218   -0.2415644672135135      7.171895868851585e-08
# 20000000    0.7853981383974463   -0.2415645071014821    -0.24156200579304035     2.5013084417602194e-06
# 30000000    0.7853981467307797   -0.24156449649115225   -0.24156276311535874     1.7333757935111826e-06
# 40000000    0.7853981508974464   -0.24156449118598736   -0.2415610924704305      3.3987155568515615e-06
# 50000000    0.7853981533974463   -0.2415644880028885    -0.24155938431391114     5.103688977353693e-06
# 60000000    0.785398155064113    -0.24156448588082252   -0.24156878504858376    -4.2991677612347345e-06
# 70000000    0.7853981562545892   -0.24156448436506117   -0.2415661005252936     -1.6161602324205049e-06
# 80000000    0.7853981571474463   -0.24156448322824017   -0.24156576573865884    -1.2825104186708902e-06
# 90000000    0.7853981578418907   -0.2415644823440461    -0.24155994853452722     4.533809518869614e-06
# 100000000   0.7853981583974463   -0.24156448163669073   -0.24156269776254427     1.7838741464548669e-06
# 200000000   0.7853981608974463   -0.24156447845359189   -0.2415668536626727     -2.375209080807128e-06
# 300000000   0.7853981617307796   -0.24156447739255898   -0.24156412635558158     3.510369774029076e-07
# 400000000   0.7853981621474463   -0.24156447686204244   -0.24156429914813096     1.7771391147558546e-07
# 500000000   0.7853981623974463   -0.24156447654373253   -0.2415664505593277     -1.9740155951797345e-06
# 600000000   0.785398162564113    -0.24156447633152592   -0.24156362396548453     8.523660413872758e-07
# 700000000   0.7853981626831606   -0.24156447617994975   -0.24156517199254282    -6.958125930711656e-07
# 800000000   0.7853981627724463   -0.24156447606626766   -0.24156421555708457     2.605091830865103e-07
# 900000000   0.7853981628418908   -0.24156447597784825   -0.24156415202143047     3.2395641777482886e-07
# 1000000000  0.7853981628974464   -0.24156447590711272   -0.24156323811811384     1.237788998881273e-06



